pipeline {
   agent any
   environment {
       GOCACHE = "/tmp"
   }
   parameters {
       booleanParam(defaultValue: false, description: 'Test K8s with Terratest Helm plugin?', name: 'TWTP')
       booleanParam(defaultValue: false, description: 'Test K8s with Sonobuoy plugin(minimal)?', name: 'TWSP')
       booleanParam(defaultValue: false, description: 'Check for expected Pods to be healthy?', name: 'CHECKPODS')
   }
   stages {
       stage('Prep') {
           steps {
               sh 'echo "WS Cleanup"'
           }
           post { 
                always { 
                    cleanWs cleanWhenAborted: true
                    cleanWs cleanWhenFailure: true
                    cleanWs cleanWhenSuccess: true
                    cleanWs deleteDirs: true
                }
            }
       }
       stage('Smoke Tests') {
           parallel {
               stage('test-with-terratest-plugin') {
                   when {
                     expression { env.TWTP == "true" }
                   }
                   steps {
                     git changelog: false, poll: false, url: 'https://github.com/gruntwork-io/terratest-helm-testing-example.git'
                     sh 'pwd'
                     sh 'echo $PATH'
                     sh 'cd test; pwd; go test minimal_pod_integration_test.go -v -short'
                   }
               }
               stage('check-for-existing-pods-health') {
                   when {
                     expression { env.CHECKPODS == "true" }
                   }
                   steps {
                     sh '''
                      //k8sPodChecker=$(kubectl get pods --all-namespaces --field-selector=status.phase!=Running | grep -iv COMPLETED |  grep -iv NAMESPACE | wc -l);
                      k8sPodChecker=$(kubectl get pods --all-namespaces  | awk '{print $4}' | egrep -v "STATUS|Running|Completed" | wc -l)
                      if [[ ${k8sPodChecker} -gt 0 ]];
                      then
                        echo "[FAILURE] The Cluster contain errored pods. Please check"
                        exit ${k8sPodChecker}
                      else
                        echo "[SUCCESS] The cluster has no errored pods."
                      fi
                      '''
                   }
               }
               stage('test-with-sonobuoy-plugin') {
                   when {
                     expression { env.TWSP == "true" }
                   }
                   steps {
                     sh '''
                       sonobuoy delete --wait
                       sonobuoy run --e2e-focus "Clean up pods on node kubelet should be able to delete 10 pods per node in 1m0s" --wait
                       sonobuoy status
                       results1=$(sonobuoy retrieve);sonobuoy results $results1
                       pwd
                       mkdir -p results1
                       echo $results1
                       ls -la 
                       tar -xvzf $results1 -C results1
                       ls -la
                     '''
                     sh '''
                       sonobuoy delete --wait
                       sonobuoy run --e2e-focus "Pods should be submitted and removed" --wait
                       sonobuoy status
                       results2=$(sonobuoy retrieve);sonobuoy results $results2
                       pwd
                       mkdir -p results2
                       echo $results2
                       ls -la 
                       tar -xvzf $results2 -C results2
                       ls -la
                     '''
                   }
                   post {
                       always {
                           junit 'results**/plugins/e2e/results/**/*.xml'
                       }
                   }
                }
            }
            post { 
                always { 
                    cleanWs cleanWhenAborted: true
                    cleanWs cleanWhenFailure: true
                    cleanWs cleanWhenSuccess: true
                    cleanWs deleteDirs: true
                }
            }
        }
    }
}