pipeline {
   //agent any
   agent {
         kubernetes {
           yamlFile 'KubernetesPod.yaml'
         }
   }
   environment {
       registry = "nonai/repo1"
       GOCACHE = "/tmp"
   }
   stages {
       stage('Build') {
           agent {
               docker {
                   image 'golang'
               }
           }
           steps {
               // Create our project directory.
               sh 'cd ${GOPATH}/src'
               sh 'mkdir -p ${GOPATH}/src/hello-world'
               // Copy all files in our Jenkins workspace to our project directory.
               sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/hello-world'
               // Build the app.
               sh 'go build'
           }
       }
       stage('Test') {
//           agent {
//             kubernetes {
//                     yaml """
//apiVersion: v1
//kind: Pod
//namespace: jenkins
//metadata:
//  labels:
//    some-label: jenkins-slave-pod
//spec:
//  containers:
//  - name: golang
//    image: golang
//    command:
//    - cat
//    tty: true
//"""
//}
//           }
           steps {
               // Create our project directory.
               container('golang'){
                 sh 'cd ${GOPATH}/src'
                 sh 'echo "Test section"'
               }
               // sh 'mkdir -p ${GOPATH}/src/hello-world'
               // Copy all files in our Jenkins workspace to our project directory.
               // sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/hello-world'
               // Remove cached test results.
               // sh 'go clean -cache'
               // Run Unit Tests.
               // sh 'go test ./... -v -short'
           }
       }
       stage('Publish') {
           environment {
               registryCredential = 'docker-hub'
           }
           steps{
             container('docker'){
               script {
                   sh "which docker"
                   def appimage = docker.build registry + ":$BUILD_NUMBER"
                   docker.withRegistry( '', registryCredential ) {
                       appimage.push()
                       appimage.push('latest')
                   }
               }
           }
         }
       }
       stage ('Deploy') {
           steps {
             container('slave-with-helm'){
               script{
                   def image_id = registry + ":$BUILD_NUMBER"
                   sh "echo IMAGE ID ready for deployment: \"${image_id}\""
                   sh "helm init --client-only"
                   sh "helm list"
               }
           }
       }
     }
   }
}
